// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Validators;
using Elements.Serialization.JSON;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Hypar.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace HierarchicalModelTestFunc
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public  class HierarchicalModelTestFuncInputs : S3Args
    
    {
        [Newtonsoft.Json.JsonConstructor]
        
        public HierarchicalModelTestFuncInputs(InputData @singleFile, IList<InputData> @listOfFiles, Hierarchical @hierarchical, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey):
        base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<HierarchicalModelTestFuncInputs>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @singleFile, @listOfFiles, @hierarchical});
            }
        
            this.SingleFile = @singleFile;
            this.ListOfFiles = @listOfFiles;
            this.Hierarchical = @hierarchical;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Single File", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InputData SingleFile { get; set; }
    
        [Newtonsoft.Json.JsonProperty("List of Files", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<InputData> ListOfFiles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Hierarchical", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Hierarchical Hierarchical { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class Hierarchical 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public Hierarchical(double @aNumberInput, InputData @nestedInputData)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<Hierarchical>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @aNumberInput, @nestedInputData});
            }
        
            this.ANumberInput = @aNumberInput;
            this.NestedInputData = @nestedInputData;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("A Number Input", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ANumberInput { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Nested Input Data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InputData NestedInputData { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }
}